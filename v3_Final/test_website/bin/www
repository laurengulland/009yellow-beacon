#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('coordinate:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);


//////////////////////////////////
/////  Socket Stuff
//////////////////////////////////

// Require socket, connect it to our http server
const io = require('socket.io')(server)
// This runs when it connects with the client-side library
io.on('connection', (socket) => {
  console.log("connected on server!");

  // Listen for an event by name "socket_test", then handle the message in a callback
  // This name has to match the name on the client!
  socket.on('socket_from_client', msg => {
    console.log("incoming message: ", msg.val);
    // When we get a message from the client, emit one back! 
    let resp = {val: 'hello from server'};
    socket.emit('socket_from_server', resp);
  });

});
// *** Notice how we wrap our socket listening and emitting events inside the on('connection') function
// We need to make sure our connection is live before we try to do anything else
//////////////////////////////////
/////  End of Socket Stuff
//////////////////////////////////



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
